using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.Linq;

namespace Week07Homework
{
    public partial class Form1 : Form
    {
        List<Product> products;

        public Form1()
        {
            InitializeComponent();
            products = new List<Product>();

        }

        private void btnInput_Click(object sender, EventArgs e)
        {
            // '등록’ 클릭 시
            // 이름, 가격, 재고는 모두 입력되어 있어야 하며, 유효한 값으로 이루어져야한다. 그렇지 않은 경우는 등록하지 않는다.
            // 등록시 입력 정보 외에 등록일자와 상품코드도 등록한다.
            // 등록일자는 테스트를 위해 현재 일자보다 20~99 일 이전의 일자가 나오도록 구성한다.(Random 이용)
            // 상품코드는 현재일자 연월일 여덟 글자와 세 자리의 숫자로 이루어진다. 세 자리의 숫자는 난수를 발생시킨다.
            // ex)20250416001
            // 기존 코드와 중복되지 않는 코드가 나올 때까지 확인해 처리한다. (Random과 do -while이용)
            // 등록정보가 이상이 없는 경우 Product를 생성하고 instance 필드 List를 만들어 추가한다.


            // 상품 이름 검사
            if (string.IsNullOrEmpty(tbxInputProductName.Text)) {
                tbxInputProductName.Focus();
                MessageBox.Show("상품 이름을 입력해주세요.");
                return;
            }
            string name = tbxInputProductName.Text;

            // 상품 가격 검사
            if (string.IsNullOrEmpty(tbxInputProductPrice.Text)) {
                tbxInputProductPrice.Focus();
                MessageBox.Show("상품 가격을 입력해주세요.");
                return;
            }
            if (!int.TryParse(tbxInputProductPrice.Text, out int price)) {
                tbxInputProductPrice.Focus();
                MessageBox.Show("숫자를 입력해주세요.");
                return;
            }
            if (price < 0) {
                tbxInputProductPrice.Focus();
                MessageBox.Show("가격은 음수일 수 없습니다.");
                return;
            }

            // 재고 수량 검사
            if (string.IsNullOrEmpty(tbxInputProductStock.Text)) {
                tbxInputProductStock.Focus();
                MessageBox.Show("재고 수량을 입력해주세요.");
                return;
            }
            if (!int.TryParse(tbxInputProductStock.Text, out int stock)) {
                tbxInputProductStock.Focus();
                MessageBox.Show("숫자를 입력해주세요.");
                return;
            }
            if (stock < 0) {
                tbxInputProductStock.Focus();
                MessageBox.Show("재고 수량은 음수일 수 없습니다.");
                return;
            }

            Product product = new Product();
            product.Pname = name;
            product.price = price;
            product.stock = stock;

            // 상품 코드 생성
            Random random = new Random();
            string code;
            do {
                code = DateTime.Now.ToString("yyyyMMdd") + random.Next(1000).ToString("D3");
            } while (products.Any(p => p.Pcode == code));
            product.Pcode = code;

            // 등록일자 생성
            DateTime regDate = DateTime.Now.AddDays(-random.Next(20, 100));
            product.RegDate = regDate;
            products.Add(product);

            // 등록완료 메세지 출력 후 이름,가격,재고 초기화
            MessageBox.Show("등록완료");
            tbxInputProductName.Text = string.Empty;
            tbxInputProductPrice.Text = string.Empty;
            tbxInputProductStock.Text = string.Empty;
            tbxInputProductStock.Focus();

        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            //‘조회’ 클릭 시
            // 이름이나 코드를 가져와 코드 또는 이름의 일부가 있는 상품은 모두 lbxSearchProduct에 추가한다.
            // 상품 검색이 안되는 경우, 해당상품이 없다고 안내한다.
            // 조회 전 상품관련 조회 컨트롤을모두 초기화 한다.
            clearProductInfo();
            lbxSearchProduct.Items.Clear();

            var searchproduct = tbxSearchNameCode.Text;
            foreach (var product in products) {
                if (product.Pcode.Contains(searchproduct) || product.Pname.Contains(searchproduct)) {
                    lbxSearchProduct.Items.Add(product);
                }
            }


            // 입력한 이름&코드에 해당하는 상품이 없으면 return
            if (lbxSearchProduct.Items.Count == 0) {
                MessageBox.Show("상품이 없습니다.");
                tbxSearchNameCode.Focus();
                return;
            }
        }

        private void clearProductInfo()
        {
            lblSearchProductName.Text = "";
            lblSearchProductCode.Text = string.Empty;
            lblSearchProductPrice.Text = string.Empty;
            lblSearchProductSalePrice.Text = string.Empty;
            lblSearchProductStock.Text = string.Empty;
            lblSearchProductRegDate.Text = string.Empty;
            lblSearchProductTotalPrice.Text = string.Empty;
            tbxSearchProductCount.Text = string.Empty;

        }

        private void btncal_Click(object sender, EventArgs e)
        {
            //‘계산‘ 클릭 시
            // 수량과 가격을 곱해서 ‘총가격’에 출력하기
            // Product의 CalPrice() 메소드 이용하기
            // 수량이 0 이하이거나 재고 수량을 초과하는 경우는 계산하지 않기
            // 팁) 클릭 전에 총 가격 정보는 지우고 진행한다.
            Product product = lbxSearchProduct.SelectedItem as Product;
            if (product == null) {
                MessageBox.Show("상품을 선택해주세요.");
                return;
            }
            if (string.IsNullOrEmpty(tbxSearchProductCount.Text)) {
                tbxSearchProductCount.Focus();
                MessageBox.Show("수량을 입력해주세요.");
                return;
            }
            if (true == int.TryParse(tbxSearchProductCount.Text, out int ProductCount)) {
                if (ProductCount <= 0 || ProductCount > product.stock) {
                    MessageBox.Show("수량을 다시 입력해주세요.");
                    tbxSearchProductCount.Focus();
                    return;
                }
            }
            else {
                MessageBox.Show("숫자를 입력해주세요.");
                tbxSearchProductCount.Focus();
                return;
            }
            lblSearchProductTotalPrice.Text = product.CalPrice(ProductCount).ToString();



        }

        private void lbxSearchProduct_SelectedIndexChanged(object sender, EventArgs e)
        {
            // lbxSearchProduct 아이템 클릭 시
            if (lbxSearchProduct.SelectedIndex < 0) {
                return;
            }

            // 선택한 항목에 해당하는 내용을 오른쪽 컨트롤에 모두 출력하기
            // 등록일자는 yyyy-MM - dd 형태로 출력하기
            // 할인가격은 Product의 SalePrice()를 이용하기
            var product = lbxSearchProduct.SelectedItem as Product;
            lblSearchProductName.Text = product.Pname;
            lblSearchProductCode.Text = product.Pcode;
            lblSearchProductPrice.Text = product.price.ToString();
            lblSearchProductSalePrice.Text = product.SalePrice().ToString();
            lblSearchProductStock.Text = product.stock.ToString();
            lblSearchProductRegDate.Text = product.RegDate.ToString("yyyy-MM-dd");
            tbxSearchProductCount.Text = string.Empty;
            lblSearchProductTotalPrice.Text = string.Empty;


        }
    }

}
